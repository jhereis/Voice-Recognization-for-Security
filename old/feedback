# 📦 Importações
import sounddevice as sd
from scipy.io.wavfile import write
import librosa
import numpy as np
import uuid
import os
import json
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from ibm_watson import SpeechToTextV1
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator

# 🔑 IBM Watson - Substitua com a sua chave e URL
API_KEY = "sua-api-key-aqui"
URL = "sua-url-aqui"

authenticator = IAMAuthenticator(API_KEY)
stt = SpeechToTextV1(authenticator=authenticator)
stt.set_service_url(URL)

# 🎤 Função para gravar áudio
def gravar_audio(duracao, arquivo):
    fs = 44100
    print("🎙️ Gravando...")
    audio = sd.rec(int(duracao * fs), samplerate=fs, channels=1)
    sd.wait()
    write(arquivo, fs, audio)
    print(f"✅ Gravação salva: {arquivo}")

# 🧠 Transcrição com Watson
def reconhecer_voz_ibm(arquivo):
    with open(arquivo, 'rb') as audio_file:
        resposta = stt.recognize(
            audio=audio_file,
            content_type='audio/wav',
            model='pt-BR_BroadbandModel'
        ).get_result()
    try:
        texto = resposta['results'][0]['alternatives'][0]['transcript']
        return texto
    except (IndexError, KeyError):
        return ""

# 😠 Detectar emoção por palavras-chave
def extrair_emocao(texto):
    texto = texto.lower()
    if "medo" in texto or "assustado" in texto or "pânico" in texto:
        return "medo"
    elif "raiva" in texto or "ódio" in texto or "irritado" in texto:
        return "raiva"
    elif "feliz" in texto or "alegre" in texto or "contente" in texto:
        return "alegria"
    elif "triste" in texto or "deprimido" in texto or "chorar" in texto:
        return "tristeza"
    else:
        return "neutro"

# 📁 Salvar feedback
def salvar_feedback(texto, emocao_detectada, comentario):
    nova_linha = {
        "frase": texto,
        "emocao_detectada": emocao_detectada,
        "comentario": comentario
    }

    # Salvar CSV
    arquivo_csv = "feedback.csv"
    if os.path.exists(arquivo_csv):
        df = pd.read_csv(arquivo_csv)
        df = pd.concat([df, pd.DataFrame([nova_linha])], ignore_index=True)
    else:
        df = pd.DataFrame([nova_linha])
    df.to_csv(arquivo_csv, index=False)

    # Salvar JSON
    arquivo_json = "feedback.json"
    if os.path.exists(arquivo_json):
        with open(arquivo_json, 'r', encoding='utf-8') as f:
            dados = json.load(f)
    else:
        dados = []
    dados.append(nova_linha)
    with open(arquivo_json, 'w', encoding='utf-8') as f:
        json.dump(dados, f, ensure_ascii=False, indent=4)

# 📊 Mostrar gráfico
def mostrar_grafico_feedback():
    if not os.path.exists("feedback.csv"):
        print("⚠️ Nenhum feedback registrado ainda.")
        return

    feedback_df = pd.read_csv("feedback.csv")
    erros = feedback_df[feedback_df["comentario"] != ""]

    if erros.empty:
        print("✅ Nenhum erro registrado até agora.")
        return

    emocao_counts = erros["emocao_detectada"].value_counts().reset_index()
    emocao_counts.columns = ["Emoção Detectada", "Ocorrências"]

    plt.figure(figsize=(8, 5))
    sns.barplot(data=emocao_counts, x="Emoção Detectada", y="Ocorrências")
    plt.title("Frequência de Erros por Emoção Detectada")
    plt.xlabel("Emoção com erro")
    plt.ylabel("Número de Ocorrências")
    plt.tight_layout()
    plt.show()

# 🔐 Sistema completo
def sistema_seguranca():
    nome_arquivo = f"voz_{uuid.uuid4().hex}.wav"
    gravar_audio(5, nome_arquivo)

    texto = reconhecer_voz_ibm(nome_arquivo)
    emocao = extrair_emocao(texto)

    print(f"\n🗣️ Texto reconhecido: {texto}")
    print(f"🧠 Emoção detectada: {emocao}")

    if emocao in ["medo", "tristeza"]:
        print("✅ Acesso autorizado.")
    else:
        print("❌ Acesso negado.")

    # ✔️ Validação manual da emoção
    confirmacao = input("🔎 A emoção detectada estava correta? (sim/não): ").strip().lower()
    if confirmacao != "sim":
        comentario = input("✏️ Qual era a emoção correta?: ").strip()
    else:
        comentario = ""

    salvar_feedback(texto, emocao, comentario)
    mostrar_grafico_feedback()

# ▶️ Rodar
sistema_seguranca()
